import { useState, useRef, useEffect } from 'react'\n\ninterface OptimizedImageProps {\n  src: string\n  alt: string\n  width?: number\n  height?: number\n  className?: string\n  priority?: boolean // Для LCP изображений\n  quality?: number\n  placeholder?: 'blur' | 'empty'\n}\n\nexport const OptimizedImage = ({\n  src,\n  alt,\n  width,\n  height, \n  className = '',\n  priority = false,\n  quality = 85,\n  placeholder = 'blur'\n}: OptimizedImageProps) => {\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [isInView, setIsInView] = useState(priority) // Priority изображения загружаем сразу\n  const imgRef = useRef<HTMLImageElement>(null)\n\n  // Intersection Observer для lazy loading\n  useEffect(() => {\n    if (priority) return // Priority изображения не lazy\n\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsInView(true)\n          observer.disconnect()\n        }\n      },\n      { \n        rootMargin: '50px', // Загружаем за 50px до появления\n        threshold: 0.1 \n      }\n    )\n\n    if (imgRef.current) {\n      observer.observe(imgRef.current)\n    }\n\n    return () => observer.disconnect()\n  }, [priority])\n\n  // Генерация WebP/AVIF источников\n  const getOptimizedSrc = (format: 'webp' | 'avif') => {\n    // Если это внешний URL, возвращаем как есть\n    if (src.startsWith('http')) return src\n    \n    // Для локальных файлов генерируем WebP/AVIF версии\n    const [name, ext] = src.split('.')\n    return `${name}.${format}`\n  }\n\n  // Responsive размеры\n  const responsiveSizes = width \n    ? `(max-width: 768px) ${Math.round(width * 0.8)}px, ${width}px`\n    : '100vw'\n\n  return (\n    <div \n      ref={imgRef}\n      className={`relative overflow-hidden ${className}`}\n      style={{ \n        width: width || '100%', \n        height: height || 'auto',\n        backgroundColor: placeholder === 'blur' ? '#f3f4f6' : 'transparent'\n      }}\n    >\n      {isInView && (\n        <picture>\n          {/* AVIF - самый эффективный формат */}\n          <source \n            srcSet={getOptimizedSrc('avif')} \n            type=\"image/avif\"\n            sizes={responsiveSizes}\n          />\n          \n          {/* WebP - поддержка большинством браузеров */}\n          <source \n            srcSet={getOptimizedSrc('webp')} \n            type=\"image/webp\"\n            sizes={responsiveSizes}\n          />\n          \n          {/* Fallback - оригинальный формат */}\n          <img\n            src={src}\n            alt={alt}\n            width={width}\n            height={height}\n            loading={priority ? 'eager' : 'lazy'}\n            decoding=\"async\"\n            onLoad={() => setIsLoaded(true)}\n            style={{\n              width: '100%',\n              height: '100%',\n              objectFit: 'cover',\n              transition: 'opacity 0.3s ease',\n              opacity: isLoaded ? 1 : 0\n            }}\n            // Preload для LCP изображений\n            {...(priority && {\n              fetchPriority: 'high' as const\n            })}\n          />\n        </picture>\n      )}\n      \n      {/* Blur placeholder */}\n      {placeholder === 'blur' && !isLoaded && (\n        <div \n          className=\"absolute inset-0\"\n          style={{\n            background: 'linear-gradient(90deg, #f3f4f6 25%, #e5e7eb 50%, #f3f4f6 75%)',\n            backgroundSize: '200% 100%',\n            animation: 'shimmer 2s infinite'\n          }}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default OptimizedImage"