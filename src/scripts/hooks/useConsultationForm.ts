import { ERROR_TYPES } from '@/api/config/apiConfig'
import {
  ApiError,
  consultationService,
} from '@/api/services/consultationService'
import { IOperatorInfo } from '@/constants/phoneOperators'
import { VALIDATION_LIMITS } from '@/constants/validation/formConstants'
import {
  filterEmailInput,
  filterNameInput,
} from '@/scripts/utils/formatters/inputFilters'
import {
  formatPhoneInput,
  getOperatorInfo,
} from '@/scripts/utils/formatters/phoneFormatter'
import { notificationService } from '@/services/notificationService'
import {
  IFormData,
  IFormErrors,
  IValidationResult,
  UseConsultationFormProps,
  UseConsultationFormReturn,
} from '@/types/forms/consultationForm.types'
import { ChangeEvent, FormEvent, useCallback, useEffect, useState } from 'react'
import { validateForm } from '../utils/validators/formValidators'

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
const INITIAL_FORM_DATA: IFormData = {
  name: '',
  phone: '',
  email: '',
  comment: '',
}

export const useConsultationForm = (
  props?: UseConsultationFormProps
): UseConsultationFormReturn => {
  const {
    onSubmitSuccess,
    onSubmitError,
    resetOnSuccess = true,
    validateOnBlur = false,
    validateOnChange = false,
    initialData = {},
  } = props || {}

  // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [formData, setFormData] = useState<IFormData>({
    ...INITIAL_FORM_DATA,
    ...initialData,
  })
  const [errors, setErrors] = useState<IFormErrors>({})
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [currentOperator, setCurrentOperator] = useState<IOperatorInfo | null>(
    null
  )
  const [isDirty, setIsDirty] = useState(false)
  const [touchedFields, setTouchedFields] = useState<Set<keyof IFormData>>(
    new Set()
  )

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (formData.phone) {
      const operator = getOperatorInfo(formData.phone)
      setCurrentOperator(operator)
    }
  }, [])

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  const isValid = Object.keys(errors).length === 0 && isDirty

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = useCallback(() => {
    setFormData({ ...INITIAL_FORM_DATA, ...initialData })
    setErrors({})
    setCurrentOperator(null)
    setIsDirty(false)
    setTouchedFields(new Set())
  }, [initialData])

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—à–∏–±–∫–∏
  const clearError = useCallback((fieldName: keyof IFormData) => {
    setErrors((prev) => {
      if (prev[fieldName]) {
        const { [fieldName]: _, ...rest } = prev
        return rest
      }
      return prev
    })
  }, [])

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
  const validateField = useCallback(
    (fieldName: keyof IFormData, value?: string): string | null => {
      const valueToValidate = value ?? formData[fieldName]
      const tempData = { ...formData, [fieldName]: valueToValidate }
      const validation = validateForm(tempData)
      return validation.errors[fieldName] || null
    },
    [formData]
  )

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–π —Ñ–æ—Ä–º—ã
  const validateFormData = useCallback((): IValidationResult => {
    return validateForm(formData)
  }, [formData])

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
  const setFieldValue = useCallback(
    (fieldName: keyof IFormData, value: string) => {
      setFormData((prev) => ({
        ...prev,
        [fieldName]: value,
      }))
      setIsDirty(true)
    },
    []
  )

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—è
  const getFieldError = useCallback(
    (fieldName: keyof IFormData): string | undefined => {
      return errors[fieldName]
    },
    [errors]
  )

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—à–∏–±–∫–∏
  const hasError = useCallback(
    (fieldName: keyof IFormData): boolean => {
      return !!errors[fieldName]
    },
    [errors]
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö
  const handleChange = useCallback(
    (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      const { name, value } = e.target as {
        name: keyof IFormData
        value: string
      }

      let filteredValue = value

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
      switch (name) {
        case 'phone':
          filteredValue = formatPhoneInput(value)
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
          const operator = getOperatorInfo(filteredValue)
          setCurrentOperator(operator)
          break

        case 'email':
          filteredValue = filterEmailInput(value)
          break

        case 'name':
          filteredValue = filterNameInput(value)
          break

        case 'comment':
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
          if (value.length > VALIDATION_LIMITS.comment.max) {
            return // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
          }
          filteredValue = value
          break

        default:
          filteredValue = value
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
      setFormData((prev) => ({
        ...prev,
        [name]: filteredValue,
      }))

      setIsDirty(true)

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
      if (validateOnChange) {
        const error = validateField(name, filteredValue)
        if (error) {
          setErrors((prev) => ({ ...prev, [name]: error }))
        } else {
          clearError(name)
        }
      } else if (errors[name]) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –æ—á–∏—â–∞–µ–º –µ—ë –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        clearError(name)
      }
    },
    [errors, clearError, validateField, validateOnChange]
  )

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
  const handleBlur = useCallback(
    (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      const { name } = e.target as { name: keyof IFormData }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –≤ touched
      setTouchedFields((prev) => new Set(prev).add(name))

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
      if (validateOnBlur) {
        const error = validateField(name)
        if (error) {
          setErrors((prev) => ({ ...prev, [name]: error }))
        } else {
          clearError(name)
        }
      }
    },
    [clearError, validateField, validateOnBlur]
  )

  // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = useCallback(
    async (e: FormEvent<HTMLFormElement>) => {
      e.preventDefault()

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const validation = validateForm(formData)
      if (!validation.isValid) {
        setErrors(validation.errors)
        notificationService.showValidationErrors(validation.errors)

        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π
        const firstErrorField = Object.keys(validation.errors)[0]
        if (firstErrorField) {
          const element = document.getElementById(`input-${firstErrorField}`)
          element?.focus()
        }
        return
      }

      setIsSubmitting(true)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      const loadingToastId = notificationService.loading(
        '–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤–∞—à—É –∑–∞—è–≤–∫—É...'
      )

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        const response = await consultationService.submit(formData)

        // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        notificationService.update(
          loadingToastId,
          'success',
          '–ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!'
        )

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (resetOnSuccess) {
          resetForm()
        }

        // –í—ã–∑—ã–≤–∞–µ–º callback —É—Å–ø–µ—Ö–∞
        onSubmitSuccess?.()

        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        if (typeof window !== 'undefined' && 'gtag' in window) {
          ;(window as any).gtag('event', 'form_submit', {
            event_category: 'engagement',
            event_label: 'consultation_form',
          })
        }
      } catch (error) {
        console.error('Form submission error:', error)

        let errorMessage = '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'

        if (error instanceof ApiError) {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          switch (error.type) {
            case ERROR_TYPES.NETWORK:
              errorMessage = "–ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º"
              notificationService.update(
                loadingToastId,
                'error',
                errorMessage,
                {
                  icon: 'üåê',
                }
              )
              break
            case ERROR_TYPES.TIMEOUT:
              errorMessage = "–ü–æ–≤—ñ–ª—å–Ω–µ –∑'—î–¥–Ω–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑"
              notificationService.update(
                loadingToastId,
                'error',
                errorMessage,
                {
                  icon: '‚è±Ô∏è',
                }
              )
              break
            case ERROR_TYPES.VALIDATION:
              // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
              if (error.errors && error.errors.length > 0) {
                const serverErrors: IFormErrors = {}
                error.errors.forEach((err) => {
                  if (err.field) {
                    serverErrors[err.field as keyof IFormData] = err.message
                  }
                })
                setErrors(serverErrors)
                notificationService.showValidationErrors(serverErrors)
              } else {
                errorMessage = error.message || '–î–∞–Ω—ñ –Ω–µ –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É'
                notificationService.update(
                  loadingToastId,
                  'error',
                  errorMessage
                )
              }
              break
            case ERROR_TYPES.SERVER:
              errorMessage = error.message || '–ü—Ä–æ–±–ª–µ–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ'
              notificationService.update(
                loadingToastId,
                'error',
                errorMessage,
                {
                  icon: 'üîß',
                }
              )
              break
            default:
              errorMessage = error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'
              notificationService.update(loadingToastId, 'error', errorMessage)
          }
        } else if (error instanceof Error) {
          errorMessage = error.message
          notificationService.update(loadingToastId, 'error', errorMessage)
        } else {
          notificationService.update(loadingToastId, 'error', errorMessage)
        }

        // –í—ã–∑—ã–≤–∞–µ–º callback –æ—à–∏–±–∫–∏
        onSubmitError?.(error as Error)
      } finally {
        setIsSubmitting(false)
      }
    },
    [formData, resetForm, onSubmitSuccess, onSubmitError, resetOnSuccess]
  )

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    formData,
    errors,
    isSubmitting,
    isValid,
    isDirty,
    currentOperator,

    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    handleChange,
    handleSubmit,
    handleBlur,
    resetForm,
    setFormData,
    setErrors,

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    clearError,
    validateField,
    validateForm: validateFormData,
    setFieldValue,
    getFieldError,
    hasError,
  }
}
